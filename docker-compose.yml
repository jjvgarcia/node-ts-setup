version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - '5000:5000'
    environment:
      - NODE_ENV=production
      - PORT=5000
      - API_PREFIX=/api
      - API_VERSION=v1
      - JWT_SECRET=your-super-secret-jwt-key-for-docker
      - CORS_ORIGIN=http://localhost:3000
      - LOG_LEVEL=info
      - DATABASE_URL=postgresql://user:password@db:5432/node_ts_api?schema=public
    volumes:
      - ./logs:/tmp/logs
    command: sh -c "mkdir -p /tmp/logs && npx prisma db push --accept-data-loss && node dist/server.js"
    restart: unless-stopped
    user: "0:0"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: node_ts_api
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U user -d node_ts_api']
      interval: 30s
      timeout: 10s
      retries: 3

  # Example Redis service (uncomment when needed)
  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - "6379:6379"
  #   restart: unless-stopped
volumes:
  postgres_data:
